//Have a value for each type of cash outside of both functions
 var cashValue = [
   { name: "ONE HUNDRED", val: 100.00},
   { name: "TWENTY", val: 20.00},
   { name: "TEN", val: 10.00},
   { name: "FIVE", val: 5.00},
   { name: "ONE", val: 1.00},
   { name: "QUARTER", val: 0.25},
   { name: "DIME", val: 0.10},
   { name: "NICKEL", val: 0.05},
   { name: "PENNY", val: 0.01}
   ];
function checkCashRegister(price, cash, cid) {
 //find the remainder for change value
 var change = cash - price;
 //output variable made for status and change
 var output = { status: null, change: [] };
//Creates a drawer object from the cid (cash in drawer) array
//currentVal represents the cash in drawer (CID) name and value
//accumulator represents the overall object of the cashValue arrays
//accumulator.total will store and add progressivly from 0, the total value of the cashRegister
var cashRegister = cid.reduce(
  function(accumulator, currentVal) {
  accumulator.total += currentVal[1];
  //currentVal[1] represents the currency value in drawer, currentVal[0] represents the names of currency
  accumulator[currentVal[0]] = currentVal[1];
  return accumulator;
}, {total: 0});

//If insuficient funds
if (cashRegister.total < change) {
  output.status = "INSUFFICIENT_FUNDS";
  return output;
}

//If exact change is requested
if (cashRegister === change) {
 output.status = "CLOSED";
 output.change = cid;
 return output;
}

//Creates an object from the cashValue and create a loop to go through the array
//currentVal represnts one of the currencys and its value
var changeArr = cashValue.reduce(
 function(accumulator, currentVal) {
 var value = 0;
 //While there is money available for this currency, & there is more change or equal to that of the currency
while(cashRegister[currentVal.name] > 0 && change >= currentVal.val) {
 //each iteration will cause the currency value to - from change, until change is 0
 change -= currentVal.val;
 cashRegister[currentVal.name] -= currentVal.val;
 value += currentVal.val;
 //change rounded to nearest hundreth
 change = Math.round(change * 100) / 100;
}
//If there is change (value) > 0, then add the cashValue name & change to output
if (value > 0) {
 accumulator.push([currentVal.name, value]);
}
//returns current change
return accumulator;
},
//Adds an initial empty value for the reduce in the changeArr = cashValue.reduce
[]);

//if there is nothing in the changeArr or there is leftover change, insufficient funds will be returned
if (changeArr.length < 1 || change > 0) {
 output.status = "INSUFFICIENT_FUNDS";
 return output;
}
output.status = "OPEN";
output.change = changeArr;
return output;
 }
console.log(checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]]))
